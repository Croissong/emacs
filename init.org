# -*- eval: (babel-tangle-mode 1) -*-
#+PROPERTY: header-args :results silent :tangle "./init.el"

* meta
#+begin_src elisp
;;; -*- lexical-binding: t -*-
#+end_src
* core
** Init
#+begin_src elisp

(setq straight-use-package-by-default t
      straight-repository-branch "develop"
      use-package-compute-statistics nil
      comp-async-report-warnings-errors nil
      warning-suppress-log-types '((comp))
      straight-check-for-modifications '(find-when-checking))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(use-package bind-key)
(use-package delight)
(use-package cl-lib)
(use-package f)
(use-package dash)
(use-package a)

(use-package gcmh
  :init (gcmh-mode 1)
  :delight)

(use-package my
    :straight (:local-repo "~/.config/emacs/my/" :files ("my.el"))
    :custom
    (save-some-buffers-action-alist
     (a-assoc save-some-buffers-action-alist
              ?r '(my-discard-buffer-action "discard this buffer")))
    (org-make-link-description-function 'my-url-get-title)
    :demand t)

;; Required to get e.g. wl-clipboard wayland connection working on system start (without having to restart the daemon)
;; Used in conjunction with 'systemctl --user import-environment SWAYSOCK WAYLAND_DISPLAY DISPLAY' in the sway config
(use-package exec-path-from-shell
    :custom
    (exec-path-from-shell-arguments '("-l"))
    (exec-path-from-shell-variables '("DISPLAY" "WAYLAND_DISPLAY"))
    :init
    (my-with-eval-after-frame
     (exec-path-from-shell-initialize)))
#+end_src

** Common
*** Config
#+begin_src elisp
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

(setq default-directory "~/"
      custom-file (expand-file-name "custom.el" user-emacs-directory)
      browse-url-generic-program (executable-find "handlr")
      browse-url-generic-args '("open")
      require-final-newline t
      read-process-output-max (* 1024 1024) ;; https://emacs-lsp.github.io/lsp-mode/page/performance/
      enable-local-eval t
      mouse-wheel-scroll-amount '(2 ((shift) . 2))
      mouse-wheel-progressive-speed nil
      same-window-buffer-names '("*Help*")
      Man-notify-method 'pushy

      vc-handled-backends nil

      inhibit-startup-screen t
      initial-scratch-message nil
      initial-major-mode 'text-mode

      ring-bell-function 'ignore
      vc-follow-symlinks t

      split-height-threshold 120
      split-width-threshold 160

      ;; Kill active process buffer no prompt
      kill-buffer-query-functions (remq 'process-kill-buffer-query-function kill-buffer-query-functions)

      display-buffer-alist
      '(("*Async Shell Command*" . (display-buffer-no-window))))

(fset 'yes-or-no-p 'y-or-n-p)
(delete-selection-mode 1)

(setq-default indent-tabs-mode nil
              tab-width 2
              sentence-end-double-space nil
              ;; increase (magit-commit) line autowrap width (default=70)
              fill-column 80)
#+end_src

**** Long lines fix
#+begin_src elisp
(require 'longlines)
(global-so-long-mode 1)
(setq so-long-target-modes (-union so-long-target-modes '(fundamental-mode))
      so-long-action 'longlines-mode)

#+end_src
**** Fix clipboard on wayland
https://gist.github.com/yorickvP/6132f237fbc289a45c808d8d75e0e1fb
#+begin_src elisp
(setq wl-copy-process nil)
(defun wl-copy (text)
  (setq wl-copy-process (let ((default-directory "~"))
                          (make-process :name "wl-copy"
                                      :buffer nil
                                      :command '("wl-copy" "-f" "-n")
                                      :noquery t
                                      :connection-type 'pipe)))
  (process-send-string wl-copy-process text)
  (process-send-eof wl-copy-process))
(defun wl-paste ()
  (if (and wl-copy-process (process-live-p wl-copy-process))
      nil
      (let ((default-directory "~"))
        (shell-command-to-string "wl-paste -n | tr -d '\r'"))))
(setq interprogram-cut-function 'wl-copy)
(setq interprogram-paste-function 'wl-paste)
#+end_src

*** Keybindings
#+begin_src elisp

(use-package my-hydras
    :after hydra
    :straight (:local-repo "~/.config/emacs/my/hydras/"))

(use-package general
  :config
  (general-auto-unbind-keys))

(general-unbind
  ;; disable overwrite
  "<insert>"
  ;; disable mouse-wheel zoom
  "<C-mouse-4>"
  "<C-mouse-5>"
  "C-<wheel-down>"
  "C-<wheel-up>"

  ;; https://www.reddit.com/r/emacs/comments/3c61zl/abolish_the_secondary_selection_quick_and_easy/
  "<M-drag-mouse-1>" ; mouse-set-secondary
  "<M-down-mouse-1>"   ; mouse-drag-secondary
  "<M-mouse-1>"	  ; mouse-start-secondary
  "<M-mouse-2>"	  ; mouse-yank-secondary
  "<M-mouse-3>")	  ; mouse-secondary-save-then-kill

(general-def

  "C-l" 'goto-line

  "C-M-^" 'quoted-insert
  "M-ü" 'previous-line
  "M-ä" 'next-line

  "M-ö" 'previous-buffer
  "M-#" 'next-buffer

  "C-d" 'projectile-find-file
  "C-f" 'find-file
  "M-d" 'consult-buffer

  "C-M-y" 'consult-yank
  "C-M-s" 'consult-ripgrep

  "C-M-r" 'projectile-replace-regexp
  "C-c p" 'projectile-command-map
  "C-M-c" 'projectile-switch-project

  ;; not global because conflict with org-mode new heading
  "C-<return>" 'crux-smart-open-line
  "M-<return>" 'crux-smart-open-line-above

  "C-M-w" 'er/expand-region
  "C-M-q" 'er/contract-region

  "C-x b" 'magit-blame
  "C-x l" 'magit-log-buffer-file


  "M-." 'xref-find-definitions
  ;; clashes with run-elisp-function
  ;; "M-:" 'xref-find-definitions-other-window
  "C-M-." 'xref-find-references
  "C-r" 'iedit-mode

  "C-<backspace>" 'my-backward-delete-whitespace-or-word)

(general-def
  :keymaps 'override
  :prefix "C-c"
  "l" 'org-store-link
  "a" 'org-agenda
  "b" 'org-iswitchb
  "c" 'org-capture)

(general-def
  :keymaps 'org-mode-map :package 'org
  "<return>" 'org-return
  "M-S-<delete>" 'my/org-delete-heading-or-line
  "C-M-<left>" 'org-backward-sentence
  "C-M-<right>" 'org-forward-sentence
  "C-M-<end>" 'org-sentence-newline
  "C-c e" 'org-edit-special
  "C-c TAB" nil)

(general-def
  :package 'gumshoe
  "M-," 'gumshoe-backtrack-back)

(general-def
  :keymaps 'key-translation-map
  "M-q" "C-u")

(general-def
  :keymaps 'org-src-mode-map :package 'org
  "C-c e" 'org-edit-src-exit)

(general-def
  :keymaps 'drag-stuff-mode-map :package 'drag-stuff
  "M-<up>" 'drag-stuff-up
  "M-<down>" 'drag-stuff-down)

(general-def
  :keymaps 'isearch-mode-map
  "C-r" 'isearch-query-replace)

(general-def
  :keymaps 'override
  "C-ö" 'windmove-left
  "C-#" 'windmove-right
  "C-ü" 'windmove-up
  "C-ä" 'windmove-down

  "C-^" 'delete-window
  "C-1" 'delete-other-windows
  "C-2" 'split-window-right
  "C-3" 'split-window-below
  "C-M-1" 'winner-undo
  "C-M-2" 'winner-redo

  "M-^" 'tab-close
  "M-1" 'tab-switch
  "M-2" 'my/tab-new-and-rename

  "C-M-#" 'buf-move-right
  "C-M-ö" 'buf-move-left
  "C-M-ü" 'buf-move-up
  "C-M-ä" 'buf-move-down


  "C-<up>" 'golden-ratio-scroll-screen-down
  "C-<down>" 'golden-ratio-scroll-screen-up

  "C-x ^" nil

  "C-<tab>" 'my-indent-rigidly

  "C-M-k" 'kill-this-buffer
  "M-r" 'revert-buffer

  "M-_" 'shell-command
  "<f5>" 'profiler-start
  "<f6>" 'profiler-stop

  "C-+" 'org-roam-node-find

  "C-a" 'back-to-indentation
  "C-M-q C-a" 'beginning-of-line

  "C-v" 'my-hydras-misc/body
  "C-M-f" 'my-hydras-code/body
  "C-x f" 'my-hydras-files/body
  "M-l" 'my-hydras-lsp/body
)

(general-def
  :keymaps 'embark-file-map :package 'embark
  "!" nil
  "&" nil
  "f" nil
  "r" nil
  "d" nil
  "R" nil
  "b" nil
  "l" nil
  "m" 'magit-project-status)

(general-def
  :keymaps 'embark-region-map :package 'embark
  "t" 'google-translate-smooth-translate
  "d" 'lexic-search)

(general-def
  :keymaps 'embark-identifier-map :package 'embark
  "s" 'flyspell-correct-at-point)
#+end_src

*** Editing
#+begin_src elisp
(delight 'eldoc-mode nil "eldoc")
(setq xref-prompt-for-identifier nil)
#+end_src

*** coding system
[[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][@masteringemacs]]
#+begin_src elisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq-default buffer-file-coding-system 'utf-8)
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src

*** debugging
#+begin_src elisp
(use-package explain-pause-mode
  :straight (:host github :repo "lastquestion/explain-pause-mode")
  :commands explain-pause-mode)

(use-package esup
  :custom
  (esup-depth 0)
  :commands esup)
#+end_src

*** backup & auto-save
[[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][source]]
#+begin_src elisp
(setq delete-old-versions t
      kept-new-versions 6
      create-lockfiles nil
      kept-old-versions 2
      version-control t
      backup-by-copying t
      emacs-tmp-dir (my-ensure-dir user-emacs-directory "tmp/")
      emacs-backup-dir (my-ensure-dir emacs-tmp-dir "backups/")
      emacs-autosave-dir (my-ensure-dir emacs-tmp-dir "autosaves/")
      backup-directory-alist `(("." . ,emacs-backup-dir))
      auto-save-file-name-transforms `((".*" ,emacs-autosave-dir t))
      auto-save-list-file-prefix emacs-autosave-dir)
#+end_src

*** buffer & window management
#+begin_src elisp
(winner-mode 1)

(setq tab-bar-show nil)
(tab-bar-mode)
(defun my/tab-new-and-rename ()
  (interactive)
  (tab-new)
  (call-interactively 'tab-rename))

(use-package buffer-move)

(use-package edit-indirect
  :straight (:type git :host github :repo "Fanael/edit-indirect")
  :commands edit-indirect-region)
#+end_src

** secrets
#+begin_src elisp
(use-package auth-source-pass
  :init (auth-source-pass-enable)
  :custom
  (auth-source-pass-filename (getenv "PASSWORD_STORE_DIR"))
  (auth-sources '(password-store)))

(use-package
  epa-file
  :straight nil
  :custom (epa-file-select-keys nil))

(use-package secrets)
#+end_src

* general
** org-mode
#+begin_src elisp
(use-package reveal
    :hook (org-mode . reveal-mode)
    :delight reveal-mode)
(use-package company-org-block
  :commands company-org-block
  :after company)

(use-package org
  :straight org-contrib
  :mode ("\\.org\\'" . org-mode)
  :init
  (defun my--on-org-mode ()
    (setq-local company-backends '(company-org-block))
    (company-mode +1))
  :hook (org-mode . my--on-org-mode)
  :config
    (require 'org-checklist)
    (org-indent-mode 1)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (latex . t)
       (python . t)
       (gnuplot . t)
       (shell . t)
       (sql . t)))

    :custom
    (org-directory "~/Docs/org")
    (org-capture-templates '(("a" "Brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)))
    (org-startup-indented t)
    (org-blank-before-new-entry '((heading . nil)
                                 (plain-list-item . nil)))
    (org-return-follows-link nil)
    (org-support-shift-select t)
    (org-image-actual-width '(500))
    (org-list-allow-alphabetical t)
    (org-use-property-inheritance t)
    (org-use-sub-superscripts nil)
    (org-checkbox-hierarchical-statistics t)

    (org-export-with-toc nil)
    (org-export-with-section-numbers nil)
    (org-refile-use-outline-path t)
    (org-datetree-add-timestamp 1)
    (org-extend-today-until 6)
    (org-duration-format (quote h:mm))
    (org-outline-path-complete-in-steps nil)
    (org-hide-emphasis-markers t)
    (org-refile-targets '((nil :level . 2)))

    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-pretty-entities t)
    (org-src-preserve-indentation t)
    (org-src-window-setup 'current-window)
    (org-edit-src-auto-save-idle-delay 60)

    (org-startup-folded 'content)

    :delight org-indent-mode)

(use-package my-org
    :after org
    :straight (:local-repo "~/.config/emacs/my/org/"))

(use-package polymode :defer t)


(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (my-ensure-dir org-directory "roam/"))
  :config
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol)
  :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))
              (("C-c n I" . org-roam-insert-immediate))))

(use-package deft
  :after org
  :commands deft
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-strip-summary-regexp  (concat "\\("
		  "[\n\t]" ;; blank
		  "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
		  "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
		  "\\)"))
  (deft-default-extension "org")
  (deft-use-filename-as-title t)
  (deft-directory org-roam-directory))
#+end_src

** special modes
#+begin_src elisp
(use-package vlf
    :commands (vlf-mode vlf)
    :init (require 'vlf-setup))

(use-package logview
    :commands logview-mode)
#+end_src

** passive modes
#+begin_src elisp
(use-package tree-sitter
  :init (global-tree-sitter-mode)
  :hook (tree-sitter-after-on-hook . tree-sitter-hl-mode)
  :delight)
(use-package tree-sitter-langs
  :after tree-sitter)

(use-package whole-line-or-region
    :init (whole-line-or-region-global-mode 1)
    :delight whole-line-or-region-local-mode)

(use-package ws-butler
  :init (ws-butler-global-mode 1)
  :delight ws-butler-mode)

(use-package editorconfig
    :config (editorconfig-mode 1)
    :custom
    (editorconfig-trim-whitespaces-mode 'ws-butler-mode)
    :delight editorconfig-mode)

(use-package hungry-delete
    :init (global-hungry-delete-mode)
    :delight hungry-delete-mode)

;; https://github.com/lassik/emacs-format-all-the-code/issues/33
(use-package envrc
  :init (envrc-global-mode)
  :delight envrc-mode)

(use-package async
  :init (dired-async-mode 1))

(use-package midnight
  :config
  (advice-add 'clean-buffer-list :around #'make-silent)
  (setq midnight-period (* 4 60 60)) ;; 4h
  (midnight-delay-set 'midnight-delay "4:30am")
  :custom
  (clean-buffer-list-delay-general 2))
#+end_src

** editing
#+begin_src elisp
(use-package iedit
  :custom
  (iedit-case-sensitive-default nil))

(use-package drag-stuff
    :init
    (drag-stuff-global-mode 1)
    :custom
    (drag-stuff-except-modes '(org-mode))
    :delight drag-stuff-mode)

(use-package golden-ratio-scroll-screen
  :custom
  (golden-ratio-scroll-highlight-flag nil)
  (golden-ratio-scroll-screen-ratio 3.0))

(use-package quickrun :commands quickrun)

(use-package expand-region
    :custom
    (expand-region-fast-keys-enabled nil)
    :config
    (er/enable-mode-expansions 'web-mode 'er/add-js-mode-expansions))

(use-package dogears
  :init (dogears-mode)
  :straight (:host github :repo "alphapapa/dogears.el"))

(use-package gumshoe
  :straight (gumshoe :type git
                     :host github
                     :repo "Overdr0ne/gumshoe"
                     :branch "master")
  :custom
  (gumshoe-slot-schema '(time buffer position line))
  (gumshoe-show-footprints-p nil)
  :init
  ;; Enabing global-gumshoe-mode will initiate tracking
  (global-gumshoe-mode +1)
  ;; customize peruse slot display if you like
  ;; personally, I use perspectives, so I use the provided extension
  ;; :after (perspective)
  ;; (global-gumshoe-persp-mode +1)
  ;; (setf gumshoe-slot-schema '(perspective time buffer position line))
  )
#+end_src

*** formatting
#+begin_src elisp
;; Unified approach inc: https://github.com/purcell/reformatter.el/pull/24
(use-package format-all
  :hook
  ((sh-mode css-mode web-mode scss-mode)
   . format-all-mode)
  :init
  (defun format-all-default()
    (format-all-ensure-formatter)
    (format-all-mode))
  :config
  (define-format-all-formatter isort
    (:executable "isort")
    (:install "pip install isort")
    (:languages "Python")
    (:features)
    (:format (format-all--buffer-easy
              executable "-d" "-")))

  (setq-default format-all-formatters '(("Python" black)
                                        ("Shell" shfmt)
                                        ("Go" gofmt)))
  :delight format-all-mode)
#+end_src

*** lsp
#+begin_src elisp
(use-package lsp-mode
  :commands lsp-deferred
  :hook (lsp-mode . lsp-enable-which-key-integration)
  :init
  (cl-defun my/lsp-format-buf ((&optional (format t)) (&optional (organize-imports t)))
    (add-hook 'before-save-hook
              (lambda () (lsp-format-buffer) (lsp-organize-imports)) 0 t))
  :config
  (setq lsp-file-watch-ignored-directories (-union
                           lsp-file-watch-ignored-directories
                           '("[/\\\\]\\.direnv\\'"
                             "[/\\\\]\\.mypy_cache\\'"
                             "[/\\\\]\\.pytest_cache\\'"
                             "[/\\\\]dot_git\\'")))

  ;; https://emacs-lsp.github.io/lsp-mode/page/faq/#how-do-i-force-lsp-mode-to-forget-the-workspace-folders-for-multi-root
  (advice-add 'lsp :before (lambda (&rest _args) (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht)))))
  :custom
  (lsp-enable-file-watchers nil)
  (lsp-enable-snippet nil)
  (lsp-signature-doc-lines 1)
  (lsp-signature-auto-activate t)
  (lsp-progress-via-spinner nil)
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-modeline-code-actions-enable nil)
  (lsp-keymap-prefix "M-l")
  (lsp-disabled-clients '(ts angular-ls))
  (lsp-keep-workspace-alive nil)
  :bind (:map lsp-mode-map
              ;; ("M-." . lsp-goto-implementation)
              ("M--" . lsp-execute-code-action)))

(use-package lsp-ui
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-enable nil)
    (lsp-ui-sideline-enable t))

(use-package dap-mode
  :commands dap-debug
  :hook (dap-stopped .(lambda (arg) (call-interactively #'dap-hydra)))
  :init
  (require 'dap-hydra)
  :custom
  (dap-auto-configure-mode t)
  (dap-auto-configure-features '(locals repl)))
#+end_src

*** linting
#+begin_src elisp
(use-package flycheck
    :commands flycheck-mode)

(use-package flyspell
    :hook ((text-mode markdown-mode) . flyspell-mode)
    :config

    ;; Disable clickable overlay
    ;; https://emacs.stackexchange.com/questions/36899/disable-clickable-links-for-misspelled-words-flyspell
    (advice-add 'make-flyspell-overlay :filter-return
                (lambda (overlay)
                  (overlay-put overlay 'help-echo nil)
                  (overlay-put overlay 'keymap nil)
                  (overlay-put overlay 'mouse-face nil)))
    :delight flyspell-mode)

(use-package flyspell-correct :after flyspell)
#+end_src

** minibuffer & completion
#+begin_src elisp
(use-package selectrum
    :after (orderless)
    :init (selectrum-mode +1)
    :custom
    (selectrum-refine-candidates-function #'orderless-filter)
    (orderless-skip-highlighting (lambda () selectrum-is-active))
    (selectrum-highlight-candidates-function #'orderless-highlight-matches)
    (magit-completing-read-function #'selectrum-completing-read)
    :bind (:map selectrum-minibuffer-map
                ("M-#" . selectrum-insert-current-candidate)
                ("M-ö" . my-backward-delete-sexp)))

(use-package orderless
    :custom
    (orderless-matching-styles '(orderless-prefixes)))

(use-package prescient
  :custom
  (prescient-history-length 50))
(use-package selectrum-prescient
    :after (prescient selectrum)
    :config
    (prescient-persist-mode +1)
    (selectrum-prescient-mode +1)
    :custom
    (selectrum-prescient-enable-filtering nil))

(use-package ctrlf
    :init (ctrlf-mode +1)
    :config
    (setq ctrlf-minibuffer-bindings (a-assoc ctrlf-minibuffer-bindings
                                        "M-ä" 'ctrlf-next-match
                                        "M-ü" 'ctrlf-previous-match
                                        "C-r" 'ctrlf-change-search-style)))

;; https ://www.reddit.com/r/emacs/comments/krptmz/emacs_completion_framework_embark_consult/
(use-package consult
    :custom
    (consult-project-root-function #'projectile-project-root)
    (consult-preview-key nil))

(use-package marginalia
  :init
  (marginalia-mode)
  :config
  (setq marginalia-command-categories
        (a-merge marginalia-command-categories '((projectile-find-file . file)
                                                 (projectile-find-dir . file))))
  (advice-add #'marginalia-cycle :after
              (lambda () (when (bound-and-true-p
                                selectrum-mode) (selectrum-exhibit)))))

(use-package embark
    :bind*
  ("C-q" . embark-act)
  :config
  (add-to-list 'embark-pre-action-hooks '(flyspell-correct-at-point embark--ignore-target)))

(use-package embark-consult
  :after (embark consult))
#+end_src

*** crux
https://github.com/bbatsov/crux
#+begin_src elisp
(use-package crux)
#+end_src

*** rainbow-mode
#+begin_src elisp
(use-package rainbow-mode
    :hook (css-mode org-mode help-mode)
    :delight rainbow-mode)
#+end_src

*** kurecolor
#+begin_src elisp
(use-package kurecolor :defer t)
#+end_src

*** Evil-Nerd-Commenter
#+begin_src elisp
(use-package evil-nerd-commenter
    :config
    (evilnc-default-hotkeys))
#+end_src

*** Outshine
#+begin_src elisp
(use-package outshine
    :commands outshine-mode)

(use-package navi-mode
    :commands navi-mode)
#+end_src

*** Company-Mode
#+begin_src elisp
(use-package company
    :hook (prog-mode . company-mode)
    :custom
    (company-idle-delay 0.3)
    (company-minimum-prefix-length 1)
    (company-tooltip-align-annotations t)
    (company-dabbrev-downcase nil)
    (company-echo-delay 0)
    :bind (:map company-active-map
                ("C-ä" . company-select-next)
                ("C-ü" . company-select-previous))
    :delight company-mode)
#+end_src

*** Centered-Window-Mode
#+begin_src elisp
(use-package
  centered-window
  :init (centered-window-mode 1)
  :custom (cwm-use-vertical-padding t)
  (cwm-frame-internal-border 0)
  (cwm-incremental-padding t)
  (cwm-incremental-padding-% 2)
  (cwm-left-fringe-ratio 0)
  (cwm-centered-window-width 130)
  :delight centered-window-mode)
#+end_src

*** Smartparens
#+begin_src elisp
(use-package smartparens
    :bind (:map smartparens-mode-map
                ("C-M-a" . sp-backward-sexp)
                ("C-M-e" . sp-forward-sexp)
                ("C-S-<backspace>" . sp-backward-kill-sexp)
                ("C-M-<down>" . sp-select-next-thing))
    :init
    (smartparens-global-mode 1)
    :hook (prog-mode . show-smartparens-mode)
    :config
    (require 'smartparens-config)
    :custom
    (blink-matching-paren nil)
    (sp-show-pair-delay 0.2)
    (sp-message-width nil)
    :delight smartparens-mode)
#+end_src

*** Undo-Tree
#+begin_src elisp
(use-package undo-tree
    :init
    (global-undo-tree-mode 1)
    :bind* (("C-p" . undo-tree-undo)
            ("M-p" . undo-tree-redo)
            ("C-M-p" . undo-tree-visualize))
    :delight undo-tree-mode)
#+end_src

*** Ediff
TODO more at [[http://oremacs.com/2015/01/17/setting-up-ediff/][oremacs.com]]
**** Config
#+begin_src elisp
(setq ediff-keep-variants nil)
(setq ediff-window-setup-function 'ediff-setup-windows-plain
      ediff-split-window-function 'split-window-horizontally)
(add-hook 'ediff-prepare-buffer-hook 'show-all)
#+end_src

*** Ripgrep
#+begin_src elisp
(use-package wgrep :defer t)
#+end_src

*** Projectile
#+begin_src elisp
(use-package projectile
    :init (projectile-mode 1)
    :config
      (defun my--projectile-ignore-project (project-root)
        (f-descendant-of? project-root (f-expand "straight" user-emacs-directory)))
      (defun my--projectile-mode-line-function ()
        (format " %s" (projectile-project-name)))
    :custom
    (projectile-mode-line-function 'my--projectile-mode-line-function)
    (projectile-file-exists-remote-cache-expire nil)
    (projectile-completion-system 'default)
    (projectile-switch-project-action 'projectile-vc)
    (projectile-enable-caching t)
    (projectile-ignored-project-function #'my--projectile-ignore-project))
#+end_src

*** which-key
#+begin_src elisp
(use-package which-key
    :init (which-key-mode)
    :custom
    (which-key-show-early-on-C-h t)
    (which-key-idle-delay 3.0)
    (which-key-idle-secondary-delay 0.05)
    (help-char 94) ;; caret (ASCII)
    :delight which-key-mode)
#+end_src

*** helpful
#+begin_src elisp
(use-package
  helpful
  :bind* (("C-h f" . helpful-callable)
          ("C-h v" . helpful-variable)
          ("C-h k" . helpful-key)
          ("C-h C-d" . helpful-at-point)
          ("C-h F" . helpful-function)
          ("C-h C" . helpful-command)))
#+end_src

*** dumb-jump
#+begin_src elisp
(use-package
  dumb-jump
  :init (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  :custom (dumb-jump-prefer-searcher 'rg))
#+end_src

*** ix.io
#+begin_src elisp
(use-package
  ix
  :commands ix)
#+end_src

** hydra
#+begin_src elisp
(use-package hydra)
#+end_src

** Magit
#+begin_src elisp
(use-package magit
    :commands magit-status
    :custom
    (magit-auto-revert-mode nil)
    (magit-diff-section-arguments (quote ("--no-ext-diff" "-U2")))
    (magit-diff-refine-ignore-whitespace nil)
    (magit-refs-margin '(t "%Y-%m-%d %H:%M" magit-log-margin-width nil 18))
    (magit-log-margin '(t "%Y-%m-%d %H:%M" magit-log-margin-width t 18))
    (magit-diff-refine-hunk t)
    (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
    :config
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules-unpulled-from-upstream
                            'magit-insert-unpulled-from-upstream)
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules-unpushed-to-upstream
                            'magit-insert-unpulled-from-upstream))
#+end_src

** Dired
#+begin_src elisp
(require 'dired-x)
(use-package dired+
  :straight dired-plus
  :demand t
  :config
  (diredp-make-find-file-keys-reuse-dirs)
  :custom
  (dired-listing-switches "-aDhvl --group-directories-first")
  (dired-auto-revert-buffer t)
  (dired-clean-up-buffers-too nil)
  (dired-dwim-target t)
  :bind (("C-x d" . nil)
         :map dired-mode-map
         ("M-ö" . dired-up-directory)
         ("M-#" . dired-find-file)
         ("C-M-w" . diredp-copy-abs-filenames-as-kill)))

(use-package dired-filter
    :hook (dired-mode . dired-filter-mode)
    :custom
    (dired-filter-verbose nil)
    :delight dired-filter-mode)
#+end_src

* Languages
** adoc
#+begin_src elisp
(use-package adoc-mode
    :mode "\\.adoc\\'")
#+end_src

** docker
#+begin_src elisp
(use-package dockerfile-mode
    :mode ("\\Dockerfile\\'" "\\Dockerfile\\'"))
#+end_src

** elisp
#+begin_src elisp
(use-package emacs-lisp
  :init (defun my--on-elisp-mode ()
          (nameless-mode)
          (format-all-mode))
  :hook (emacs-lisp-mode . my--on-elisp-mode)
  :straight nil)

(use-package nameless
  :commands nameless-mode
  :custom (nameless-private-prefix t))

(use-package xtest :defer t)
#+end_src

** elixir
#+begin_src elisp
(use-package elixir-mode
    :init
    (defun my--on-elixir-mode ()
      (flycheck-mode)
      (format-all-mode))
    :hook (elixir-mode . my--on-elixir-mode)
    :mode "\\.ex\\'")

(use-package flycheck-credo
    :after elixir-mode
    :config
    (flycheck-credo-setup)
    :custom
    (flycheck-elixir-credo-strict nil))
#+end_src

** golang
#+begin_src elisp
(use-package go-mode
    :mode "\\.go\\'"
    :config
    (require 'dap-go)
    :init
    (defun my--on-go-mode ()
      (lsp-deferred)
      (format-all-mode))
    :hook (go-mode . my--on-go-mode))
#+end_src

** graphql
#+begin_src elisp
(use-package graphql-mode
    :mode ("\\.gql\\'" "\\.graphql\\'"))
#+end_src

** java
#+begin_src elisp
(use-package lsp-java)

(use-package java-mode
  :straight nil
  ;; :hook (java-mode . lsp)
  :mode "\\.java\\'")
#+end_src

** json
#+begin_src elisp
(use-package json-mode
    :mode "\\.json\\'"
    :custom
    (json-reformat:indent-width 2)
    (js-indent-level 2))
#+end_src

** jsonnet
#+begin_src elisp
(use-package jsonnet-mode
    :mode  ("\\.jsonnet\\'" "\\.libsonnet\\'"))
#+end_src

** just
#+begin_src elisp
(use-package just-mode
    :mode  ("justfile\\'"))
#+end_src

** kotlin
#+begin_src elisp
(use-package kotlin-mode
  :mode "\\.kt\\'")
#+end_src

** latex
#+begin_src elisp
(use-package tex-mode
    :straight auctex
    :mode "\\.tex\\'"
    :hook (LaTeX-mode . turn-on-reftex))
#+end_src

** lua
#+begin_src elisp
(use-package lua-mode
    :mode ("\\.lua\\'"))
#+end_src

** markdown
#+begin_src elisp
(use-package markdown-mode
    :mode "\\.md\\'")

(use-package grip-mode
  :custom
  (grip-preview-use-webkit nil))
#+end_src

** nim
#+begin_src elisp
(use-package nim-mode
    :mode "\\.nim\\'"
    :hook ((nim-mode . nimsuggest-mode)))
#+end_src

** php
#+begin_src elisp
(use-package php-mode
    :mode "\\.php\\'")
#+end_src

** plantuml
#+begin_src elisp
(use-package
    plantuml-mode
    :mode "\\.puml\\'"
    :custom
    (plantuml-executable-path "/usr/bin/plantuml")
    (plantuml-default-exec-mode 'executable))
#+end_src

** python
#+begin_src elisp
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :init
  (defun my--on-python-mode ()
    (lsp-deferred)
    (format-all-mode))
  :hook (python-mode . my--on-python-mode))

(use-package lsp-pyright
  :after python)
#+end_src

** rust
#+begin_src elisp
;; No conditional-on-mode necessary
(use-package rustic
  :custom
  (lsp-rust-analyzer-proc-macro-enable t))
#+end_src

** sql
#+begin_src elisp
(use-package sql-indent
    :mode "\\.sql\\'")
#+end_src

** terraform
#+begin_src elisp
(use-package terraform-mode
    :mode "\\.tf\\'"
    :hook (terraform-mode . format-all-default))
#+end_src

** shell
#+begin_src elisp
(use-package sh-mode
  :straight nil
  :hook (sh-mode . flycheck-mode))
#+end_src

** tramp
#+begin_src elisp
(setq tramp-default-method "ssh")
#+end_src

** webdev
#+begin_src elisp
(use-package css-mode
    :mode ("\\.less\\'" "\\.css\\'" "\\.sass\\'" "\\.scss\\'")
    :custom
    (css-indent-offset 4))

(use-package js2-mode
    :mode "\\.js\\'"
    :hook (js2-mode . (lambda ()
                  (lsp-deferred)
                  (format-all-mode)))
    :custom
    (js2-basic-offset 2)
    (js2-strict-inconsistent-return-warning nil)
    (js2-strict-missing-semi-warning nil)
    :delight)

(use-package web-mode
    :mode ("\\.html?\\'" "\\.jsx\\'" "\\.tsx\\'")
    :custom
    (web-mode-enable-auto-closing t)
    (web-mode-enable-auto-indentation nil))

(use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . (lambda ()
                                (lsp-deferred)
                                (my/lsp-format-buf)))
    :config (setq lsp-eslint-server-command
                  '("node"
                    (expand-file-name"~/.local/vscode-eslint/extension/server/out/eslintServer.js")
                    "--stdio")))
#+end_src

** yaml
#+begin_src elisp
(use-package yaml-mode
    :mode ("\\.yml.*\\'" "\\.yaml.*\\'"))
#+end_src

* tools
#+begin_src elisp
(use-package x509-mode :defer t)

(use-package restclient
    :mode ("\\.http\\'" . restclient-mode)
    :commands restclient-mode)

(use-package ledger-mode
    :mode "\\.ledger\\'")

(use-package google-translate)
(use-package google-translate-smooth-ui
  :after google-translate
  :straight nil
  :commands google-translate-smooth-translate
  :config
  ;; https://github.com/atykhonov/google-translate/issues/52#issuecomment-727920888
  (setq google-translate-translation-directions-alist '(("de" . "en")("en" . "de")))
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
  (google-translate--setup-minibuffer-keymap)
  (general-def
  :keymaps 'google-translate-minibuffer-keymap
  "M-ä" 'google-translate-next-translation-direction
  "M-ü" 'google-translate-previous-translation-direction))

(use-package mail-mode
    :straight nil
    :mode "\\/tmp\\/neomutt.*\\'")
(use-package khardel
  :general
  (:keymaps 'mail-mode-map
            "C-f" 'khardel-insert-email))

(use-package gif-screencast
  :commands gif-screencast-start-or-stop
  :custom
  (gif-screencast-program "grim")
  (gif-screencast-args ()))

(use-package insert-shebang
  :init
  ;; revert ;;;###autoload(add-hook 'find-file-hook 'insert-shebang)
  (remove-hook 'find-file-hook 'insert-shebang)
  :commands insert-shebang
  :custom
  (insert-shebang-track-ignored-filename nil))

(use-package easy-convert
  :straight (:host github :repo "Frozenlock/easy-convert")
  :commands easy-convert-interactive)

(use-package org-download
  :after org)

(use-package string-inflection
  :commands (string-inflection-all-cycle))

(use-package recover-buffers)
#+end_src

* UI
#+begin_src elisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(mouse-avoidance-mode)
(setq blink-cursor-blinks 3)
(scroll-bar-mode -1)
(column-number-mode 1)
(set-face-attribute 'default nil :family "Monospace" :height 110)
(setq-default cursor-type 'bar)

(use-package modus-themes
    :init
    (setq modus-themes-completions 'moderate
          modus-themes-region 'bg-only-no-extend
          modus-themes-org-blocks 'greyscale)
    (modus-themes-load-themes)
    (defun my-modus-themes-custom-faces ()
      (modus-themes-with-colors
        (custom-set-faces
         `(show-paren-match ((,class :foreground ,green-intense
                                            :background nil
                                            :weight ,'bold))))))
    (add-hook 'modus-themes-after-load-theme-hook #'my-modus-themes-custom-faces)
    :config
    (modus-themes-load-operandi))
#+end_src

* Calc
https://www.reddit.com/r/emacs/comments/1mbn0s/the_emacs_calculator/
* braindump
** other
*** [[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html#sec-10-2-3][@wisomandwonder]]
*** [[https://github.com/emacs-tw/awesome-emacs][awesome-emac2s]]
** elisp tips
- [[https://www.reddit.com/r/emacs/comments/3nu2xr/emacs_lisp_programming_thoughts/][@reddit.com]]
*** regexp
\(Buy: \)\([0-9]+\) -> \1\,(+ \#2 \#)

*** C-c C-o save search results
reset var: `(setq foo (eval (car (get 'foo 'standard-value))))`
(setq require-final-newline nil)
** plausiblly
https://github.com/abo-abo/hydra/wiki/Emacs
