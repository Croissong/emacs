# -*- eval: (babel-tangle-mode 1) -*-
#+PROPERTY: header-args :results silent :tangle "./init.el"

* meta
#+begin_src elisp
;;; -*- lexical-binding: t -*-
#+end_src

* core
#+begin_src elisp
;; https://github.com/hlissner/doom-emacs/blob/develop/core/core.el

(setq auto-mode-case-fold nil
      bidi-inhibit-bpa t
      highlight-nonselected-windows nil
      fast-but-imprecise-scrolling t
      frame-inhibit-implied-resize t

      idle-update-delay 1.0

      pgtk-wait-for-event-timeout 0.001

      redisplay-skip-fontification-on-input t
      command-line-ns-option-alist nil
      ad-redefinition-action 'accept
      debug-on-error init-file-debug
      jka-compr-verbose init-file-debug

      inhibit-default-init t)

(setq-default bidi-display-reordering 'left-to-right
              bidi-paragraph-direction 'left-to-right
              cursor-in-non-selected-windows nil)


;; custom

(setq default-directory "~/"
      custom-file (expand-file-name "custom.el" user-emacs-directory)
      browse-url-generic-program (executable-find "handlr")
      browse-url-generic-args '("open")
      require-final-newline t
      read-process-output-max (* 1024 1024) ;; https://emacs-lsp.github.io/lsp-mode/page/performance/
      enable-local-eval t
      mouse-wheel-scroll-amount '(2 ((shift) . 2))
      mouse-wheel-progressive-speed nil
      same-window-buffer-names '("*Help*")
      Man-notify-method 'pushy

      vc-handled-backends nil

      inhibit-startup-screen t
      initial-scratch-message nil
      initial-major-mode 'text-mode

      ring-bell-function 'ignore
      vc-follow-symlinks t

      split-height-threshold 120
      split-width-threshold 160

      ;; Kill active process buffer no prompt
      kill-buffer-query-functions (remq 'process-kill-buffer-query-function kill-buffer-query-functions)

      display-buffer-alist
      '(("*Async Shell Command*" . (display-buffer-no-window))))

(setq-default indent-tabs-mode nil
              tab-width 2
              sentence-end-double-space nil
              ;; increase (magit-commit) line autowrap width (default=70)
              fill-column 80)

(fset 'yes-or-no-p 'y-or-n-p)
(delete-selection-mode 1)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)


;;;; as per https://github.com/minad/vertico#configuration

;; Add prompt indicator to `completing-read-multiple'.
;; Alternatively try `consult-completing-read-multiple'.
(defun crm-indicator (args)
  (cons (concat "[CRM] " (car args)) (cdr args)))
(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

;; Do not allow the cursor in the minibuffer prompt
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

(setq enable-recursive-minibuffers t)
#+end_src

* bootstrap
#+begin_src elisp

(setq straight-use-package-by-default t
      straight-repository-branch "develop"
      use-package-compute-statistics nil
      comp-async-report-warnings-errors nil
      warning-suppress-log-types '((comp))
      straight-check-for-modifications '(find-when-checking))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(use-package bind-key)
(use-package delight)
(use-package f)
(use-package dash)
(use-package a)

(use-package my
    :straight (:local-repo "~/.config/emacs/my/" :files ("my.el"))
    :custom
    (save-some-buffers-action-alist
     (a-assoc save-some-buffers-action-alist
              ?r '(my-discard-buffer-action "discard this buffer")))
    (org-make-link-description-function 'my-url-get-title)
    :demand t)

;; Required to get e.g. wl-clipboard wayland connection working on system start (without having to restart the daemon)
;; Used in conjunction with 'systemctl --user import-environment SWAYSOCK WAYLAND_DISPLAY DISPLAY' in the sway config
(use-package exec-path-from-shell
    :custom
    (exec-path-from-shell-arguments '("-l"))
    (exec-path-from-shell-variables '("DISPLAY" "WAYLAND_DISPLAY"))
    :init
    (my-with-eval-after-frame
     (exec-path-from-shell-initialize)))
#+end_src

* libs
#+begin_src elisp
(use-package ts)
#+end_src

* common
** keybindings
#+begin_src elisp

(use-package my-hydras
    :after hydra
    :straight (:local-repo "~/.config/emacs/my/hydras/"))

(use-package general
  :config
  (general-auto-unbind-keys))

(general-unbind
  ;; disable overwrite
  "<insert>"
  ;; disable mouse-wheel zoom
  "<C-mouse-4>"
  "<C-mouse-5>"
  "C-<wheel-down>"
  "C-<wheel-up>"

  ;; https://www.reddit.com/r/emacs/comments/3c61zl/abolish_the_secondary_selection_quick_and_easy/
  "<M-drag-mouse-1>" ; mouse-set-secondary
  "<M-down-mouse-1>"   ; mouse-drag-secondary
  "<M-mouse-1>"	  ; mouse-start-secondary
  "<M-mouse-2>"	  ; mouse-yank-secondary
  "<M-mouse-3>")	  ; mouse-secondary-save-then-kill

(general-def
  "C-M-^" 'quoted-insert

  "C-M-y" 'consult-yank
  "C-M-s" 'consult-ripgrep

  "C-M-r" 'projectile-replace-regexp
  "C-c p" 'projectile-command-map
  "C-M-c" 'projectile-switch-project

  ;; not global because conflict with org-mode new heading
  "C-<return>" 'crux-smart-open-line
  "M-<return>" 'crux-smart-open-line-above

  ;; not global because of conflict in minibuffer (isearch)
  "M-ü" 'previous-line
  "M-ä" 'next-line

  "C-M-w" 'er/expand-region
  "C-M-q" 'er/contract-region

  "C-x b" 'magit-blame
  "C-x l" 'magit-log-buffer-file


  "M-." 'xref-find-definitions
  ;; clashes with run-elisp-function
  ;; "M-:" 'xref-find-definitions-other-window
  "C-M-." 'xref-find-references
  "C-r" 'iedit-mode

  "C-<backspace>" 'my-backward-delete-whitespace-or-word)

(general-def
  :keymaps 'override
  :prefix "C-c"
  "l" 'org-store-link
  "a" 'org-agenda
  "b" 'org-iswitchb
  "c" 'org-capture)

(general-def
  :keymaps 'org-mode-map :package 'org
  "<return>" 'org-return
  "M-S-<delete>" 'my/org-delete-heading-or-line
  "C-M-<left>" 'org-backward-sentence
  "C-M-<right>" 'org-forward-sentence
  "C-M-<end>" 'org-sentence-newline
  "C-c e" 'org-edit-special
  "C-c TAB" nil)

(general-def
  :package 'dogears
  "M-ö" 'dogears-back
  "M-#" 'dogears-forward)

(general-def
  :keymaps 'key-translation-map
  "M-q" "C-u")

(general-def
  :keymaps 'org-src-mode-map :package 'org
  "C-c e" 'org-edit-src-exit)

(general-def
  :keymaps 'drag-stuff-mode-map :package 'drag-stuff
  "M-<up>" 'drag-stuff-up
  "M-<down>" 'drag-stuff-down)

(general-def
  :keymaps 'isearch-mode-map
  "C-r" 'isearch-query-replace)

(general-def
  :keymaps 'dired-mode-map :package 'dirvish
  "M-<return>" 'dirvish-dispatch
  "M-#" 'dired-find-file
  [remap dired-do-copy] 'dirvish-yank-menu)

(general-def
  :keymaps 'override

  "C-l" 'goto-line
  "C-q" 'embark-act

  "˝" 'previous-buffer
  "’" 'next-buffer

  "C-^" 'delete-window
  "C-1" 'delete-other-windows
  "C-2" 'split-window-right
  "C-3" 'split-window-below
  "C-M-1" 'winner-undo
  "C-M-2" 'winner-redo


  "C-d" 'projectile-find-file
  "C-f" 'find-file
  "M-d" 'persp-switch-to-buffer*
  "C-M-d" 'persp-switch-to-buffer


  "M-1" 'persp-switch
  "M-2" 'persp-set-buffer
  "M-3" 'persp-remove-buffer
  "M-^" 'persp-kill

  "C-M-#" 'buf-move-right
  "C-M-ö" 'buf-move-left
  "C-M-ü" 'buf-move-up
  "C-M-ä" 'buf-move-down


  "C-M-p" 'vundo
  "C-p" 'undo-fu-only-undo
  "M-p" 'undo-fu-only-redo


  "C-<up>" 'golden-ratio-scroll-screen-down
  "C-<down>" 'golden-ratio-scroll-screen-up

  "C-x ^" nil
  "C-x d" nil

  "C-<tab>" 'my-indent-rigidly

  "C-M-k" 'kill-this-buffer
  "M-r" 'revert-buffer

  "M-_" 'shell-command
  "<f5>" 'profiler-start
  "<f6>" 'profiler-stop

  "C-+" 'org-roam-node-find

  "C-a" 'back-to-indentation
  "C-M-q C-a" 'beginning-of-line

  "C-v" 'my-hydras-misc/body
  "C-M-f" 'my-hydras-code/body
  "C-x f" 'my-hydras-files/body
  "M-l" 'my-hydras-lsp/body
)

(general-def
 "C-ö" 'windmove-left
  "C-#" 'windmove-right
  "C-ü" 'windmove-up
  "C-ä" 'windmove-down
  )

(general-def
  :keymaps 'vundo-mode-map :package 'vundo
  "C-ö" 'vundo-backward
  "C-#" 'vundo-forward
  "C-ä" 'vundo-next
  "C-ü" 'vundo-previous)

(general-def
  :keymaps 'vertico-map :package 'vertico
  "M-#" 'vertico-insert
  "M-ö" 'vertico-directory-delete-word)

(general-def
  :keymaps 'lsp-mode-map :package 'lsp-mode
  "M--"  'lsp-execute-code-action
  "C-r" 'lsp-rename)

(general-def
  :keymaps 'embark-file-map :package 'embark
  "!" nil
  "&" nil
  "f" nil
  "r" nil
  "d" nil
  "R" nil
  "b" nil
  "l" nil
  "m" 'magit-project-status)

(general-def
  :keymaps 'embark-region-map :package 'embark
  "t" 'google-translate-smooth-translate
  "d" 'lexic-search)

(general-def
  :keymaps 'embark-identifier-map :package 'embark
  "s" 'flyspell-correct-at-point)

(general-def
  :keymaps 'embark-symbol-map :package 'embark
  "s" 'flyspell-correct-at-point)

(general-def
  :keymaps 'isearch-mb-minibuffer-map :package 'isearch-mb
  "M-ä" 'isearch-repeat-forward
  "M-ü" 'isearch-repeat-backward)
#+end_src

** editing
#+begin_src elisp
(delight 'eldoc-mode nil "eldoc")
(setq xref-prompt-for-identifier nil)
#+end_src

** debugging
#+begin_src elisp
(use-package explain-pause-mode
  :straight (:host github :repo "lastquestion/explain-pause-mode")
  :commands explain-pause-mode)

(use-package esup
  :custom
  (esup-depth 0)
  :commands esup)
#+end_src

** backup & auto-save
[[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][source]]
#+begin_src elisp
(setq delete-old-versions t
      kept-new-versions 6
      create-lockfiles nil
      kept-old-versions 2
      version-control t
      backup-by-copying t
      emacs-tmp-dir (my-ensure-dir user-emacs-directory "tmp/")
      emacs-backup-dir (my-ensure-dir emacs-tmp-dir "backups/")
      emacs-autosave-dir (my-ensure-dir emacs-tmp-dir "autosaves/")
      backup-directory-alist `(("." . ,emacs-backup-dir))
      auto-save-file-name-transforms `((".*" ,emacs-autosave-dir t))
      auto-save-list-file-prefix emacs-autosave-dir)
#+end_src

** buffer & window management
#+begin_src elisp
(winner-mode 1)

(use-package perspective
  :init
  (my-with-eval-after-frame
   (persp-mode 1)
   (persp-new "dot")
   (persp-new "ad1")
   (persp-new "ad2")
   (persp-new "ad3")
   (persp-new "wrk"))
  :custom
  (persp-sort 'access)
  (persp-modestring-short t)
  (persp-suppress-no-prefix-key-warning t)
  (persp-initial-frame-name "m"))


(use-package buffer-move)

(use-package edit-indirect
  :straight (:type git :host github :repo "Fanael/edit-indirect")
  :commands edit-indirect-region)



;;; from https://github.com/nex3/perspective-el#some-musings-on-emacs-window-layouts

(customize-set-variable 'display-buffer-base-action
  '((display-buffer-reuse-window display-buffer-same-window)
    (reusable-frames . t)))

(customize-set-variable 'even-window-sizes nil)     ; avoid resizing
#+end_src

** secrets
#+begin_src elisp
(use-package auth-source-pass
  :init (auth-source-pass-enable)
  :custom
  (auth-source-pass-filename (getenv "PASSWORD_STORE_DIR"))
  (auth-sources '(password-store)))

(use-package
  epa-file
  :straight nil
  :custom (epa-file-select-keys nil))

(use-package secrets)
#+end_src

** long lines improvements
#+begin_src elisp
;; improve long line handling
(require 'longlines)
(global-so-long-mode 1)
(setq so-long-target-modes (-union so-long-target-modes '(fundamental-mode))
      so-long-action 'longlines-mode)
#+end_src

* general-purpose
** org-mode
#+begin_src elisp
;; disabled in order to fix isearch reveal of collapsed org trees
;; (use-package reveal
;;   :hook (org-mode . reveal-mode)
;;     :delight reveal-mode)
(use-package company-org-block
  :commands company-org-block
  :after cape)

(use-package org
  :straight org-contrib
  :mode ("\\.org\\'" . org-mode)
  :config
    (require 'org-checklist)
    (org-indent-mode 1)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (latex . t)
       (python . t)
       (gnuplot . t)
       (shell . t)
       (sql . t)))

    :custom
    (org-directory "~/Docs/org")
    (org-capture-templates '(("a" "Brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)))
    (org-startup-indented t)
    (org-blank-before-new-entry '((heading . nil)
                                 (plain-list-item . nil)))
    (org-return-follows-link nil)
    (org-support-shift-select t)
    (org-image-actual-width '(500))
    (org-list-allow-alphabetical t)
    (org-use-property-inheritance t)
    (org-use-sub-superscripts nil)
    (org-checkbox-hierarchical-statistics t)

    (org-export-with-toc nil)
    (org-export-with-section-numbers nil)
    (org-refile-use-outline-path t)
    (org-datetree-add-timestamp 1)
    (org-extend-today-until 6)
    (org-duration-format (quote h:mm))
    (org-outline-path-complete-in-steps nil)
    (org-hide-emphasis-markers t)
    (org-refile-targets '((nil :level . 2)))

    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-pretty-entities t)
    (org-src-preserve-indentation t)
    (org-src-window-setup 'current-window)
    (org-edit-src-auto-save-idle-delay 60)

    (org-startup-folded 'content)

    :delight org-indent-mode)

(use-package my-org
    :after org
    :straight (:local-repo "~/.config/emacs/my/org/"))

(use-package polymode :defer t)


(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (my-ensure-dir org-directory "roam/"))
  :config
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol)
  :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))
              (("C-c n I" . org-roam-insert-immediate))))

(use-package deft
  :after org
  :commands deft
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-strip-summary-regexp  (concat "\\("
		  "[\n\t]" ;; blank
		  "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
		  "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
		  "\\)"))
  (deft-default-extension "org")
  (deft-use-filename-as-title t)
  (deft-directory org-roam-directory))

(use-package org-cliplink
  :commands org-cliplink
  )
#+end_src

** special modes
#+begin_src elisp
(use-package vlf
    :commands (vlf-mode vlf)
    :init (require 'vlf-setup))

(use-package logview
    :commands logview-mode)
#+end_src

** passive modes
#+begin_src elisp
(use-package tree-sitter
  :init (global-tree-sitter-mode)
  :hook (tree-sitter-after-on-hook . tree-sitter-hl-mode)
  :delight)
(use-package tree-sitter-langs
  :after tree-sitter)

(use-package whole-line-or-region
    :init (whole-line-or-region-global-mode 1)
    :delight whole-line-or-region-local-mode)

(use-package ws-butler
  :init (ws-butler-global-mode 1)
  :delight ws-butler-mode)

(use-package editorconfig
    :config (editorconfig-mode 1)
    :custom
    (editorconfig-trim-whitespaces-mode 'ws-butler-mode)
    :delight editorconfig-mode)

(use-package hungry-delete
    :init (global-hungry-delete-mode)
    :delight hungry-delete-mode)

;; https://github.com/lassik/emacs-format-all-the-code/issues/33
(use-package envrc
  :init (envrc-global-mode)
  :delight envrc-mode)

;; currently no usage for it
;; but keep an eye on future features
;; (use-package async)

(use-package midnight
  :config
  (setq midnight-period (* 60 60 3)) ;; 3h
  (advice-add 'clean-buffer-list :around 'suppress-message-advice-around)
  (midnight-delay-set 'midnight-delay (ts-format "%I:%M%p" (ts-adjust 'minute 5 (ts-now))))
  :custom
  ;; https://www.emacswiki.org/emacs/CleanBufferList
  (clean-buffer-list-delay-special (* 60 60 2)) ;; 2h
  (clean-buffer-list-kill-regexps '(".*"))
  (clean-buffer-list-kill-never-regexps
   '("\\` \\*Minibuf-.*\\*\\'"
     "\\`\\*scratch.*"
     "\\`magit: .*"))
  )
#+end_src

** editing
#+begin_src elisp
(use-package iedit
  :custom
  (iedit-case-sensitive-default nil))

(use-package drag-stuff
    :init
    (drag-stuff-global-mode 1)
    :config
    (setq drag-stuff-except-modes '(org-mode))
    :delight drag-stuff-mode)

(use-package golden-ratio-scroll-screen
  :custom
  (golden-ratio-scroll-highlight-flag nil)
  (golden-ratio-scroll-screen-ratio 3.0))

(use-package quickrun :commands quickrun)

(use-package expand-region
    :custom
    (expand-region-fast-keys-enabled nil)
    :config
    (er/enable-mode-expansions 'web-mode 'er/add-js-mode-expansions))

(use-package dogears
  :init (dogears-mode)
  :custom
  (dogears-hooks '(xref-after-jump-hook isearch-mode-end-hook))
  :straight (:host github :repo "alphapapa/dogears.el"))
#+end_src

*** formatting
#+begin_src elisp
;; Unified approach inc: https://github.com/purcell/reformatter.el/pull/24
;; (use-package format-all
;;   :hook
;;   ((sh-mode css-mode web-mode scss-mode)
;;    . format-all-mode)
;;   :init
;;   (defun format-all-default()
;;     (format-all-ensure-formatter)
;;     (format-all-mode))
;;   :config
;;   (define-format-all-formatter isort
;;     (:executable "isort")
;;     (:install "pip install isort")
;;     (:languages "Python")
;;     (:features)
;;     (:format (format-all--buffer-easy
;;               executable "-d" "-")))

;;   (setq-default format-all-formatters '(("Python" black)
;;                                         ("Shell" shfmt)
;;                                         ("Go" gofmt)))
;;   :delight format-all-mode)


(use-package apheleia
  :init (apheleia-global-mode +1)
  :config
  (setq
    apheleia-mode-alist (a-assoc apheleia-mode-alist 'nix-mode 'alejandra)
    apheleia-mode-alist (a-assoc apheleia-mode-alist 'nxml-mode 'xmlformat)
    apheleia-formatters (a-assoc apheleia-formatters 'shfmt '("shfmt"))
    apheleia-formatters (a-assoc apheleia-formatters 'xmlformat
                                 '("xmlformat" "--blanks" "--indent" "4" "--selfclose" "-"))
    apheleia-formatters (a-assoc apheleia-formatters 'alejandra '("alejandra")))
  :delight apheleia-mode)
#+end_src

*** lsp
#+begin_src elisp
(use-package lsp-mode
  :commands lsp-deferred
  :hook
  (lsp-mode . lsp-enable-which-key-integration)
  (lsp-completion-mode . my/lsp-mode-setup-completion)
  :init
  (cl-defun my/lsp-format-buf ((&optional (format t)) (&optional (organize-imports t)))
    (add-hook 'before-save-hook
              (lambda () (lsp-format-buffer) (lsp-organize-imports)) 0 t))
  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless))) ;; Configure orderless
  :config
  (setq lsp-file-watch-ignored-directories (-union
                                            lsp-file-watch-ignored-directories
                                            '("[/\\\\]\\.direnv\\'"
                                              "[/\\\\]\\.mypy_cache\\'"
                                              "[/\\\\]\\.pytest_cache\\'"
                                              "[/\\\\]dot_git\\'")))

  ;; https://emacs-lsp.github.io/lsp-mode/page/faq/#how-do-i-force-lsp-mode-to-forget-the-workspace-folders-for-multi-root
  (advice-add 'lsp :before (lambda (&rest _args) (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht)))))
  :custom
  (lsp-auto-configure t)
  (lsp-completion-provider :none)
  (lsp-enable-file-watchers nil)
  (lsp-enable-snippet nil)
  (lsp-signature-doc-lines 1)
  (lsp-signature-auto-activate t)
  (lsp-progress-via-spinner nil)
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-modeline-code-actions-enable nil)
  (lsp-keymap-prefix "M-l")
  (lsp-disabled-clients '(ts angular-ls))
  (lsp-keep-workspace-alive nil)
  :delight (lsp-lens-mode))

(use-package lsp-ui
  :commands lsp-ui-mode
  :custom
  (lsp-ui-doc-enable nil)
  (lsp-ui-sideline-enable t))

(use-package dap-mode
  :commands dap-debug
  :hook (dap-stopped .(lambda (arg) (call-interactively #'dap-hydra)))
  :init
  (require 'dap-hydra)
  :custom
  (dap-auto-configure-mode t)
  (dap-auto-configure-features '(locals repl)))
#+end_src

*** linting
#+begin_src elisp
(use-package flycheck
    :commands flycheck-mode
    :delight flycheck-mode)

(use-package flyspell
    :hook ((text-mode markdown-mode) . flyspell-mode)
    :config

    ;; Disable clickable overlay
    ;; https://emacs.stackexchange.com/questions/36899/disable-clickable-links-for-misspelled-words-flyspell
    (advice-add 'make-flyspell-overlay :filter-return
                (lambda (overlay)
                  (overlay-put overlay 'help-echo nil)
                  (overlay-put overlay 'keymap nil)
                  (overlay-put overlay 'mouse-face nil)))
    :delight flyspell-mode)

(use-package flyspell-correct :after flyspell)
#+end_src

** isearch
#+begin_src elisp
(use-package isearch-mb
  :init (isearch-mb-mode)
  :config
  (setq-default
   isearch-lazy-count t
   search-ring-max 200
   regexp-search-ring-max 200))


;;;; isearch tweaks

;;; auto-wrap isearch: https://stackoverflow.com/a/36707038

;; Prevents issue where you have to press backspace twice when
;; trying to remove the first character that fails a search
(define-key isearch-mode-map [remap isearch-delete-char] 'isearch-del-char)

(defadvice isearch-search (after isearch-no-fail activate)
  (unless isearch-success
    (ad-disable-advice 'isearch-search 'after 'isearch-no-fail)
    (ad-activate 'isearch-search)
    (isearch-repeat (if isearch-forward 'forward))
    (ad-enable-advice 'isearch-search 'after 'isearch-no-fail)
    (ad-activate 'isearch-search)))


;; instant isearch reverse
;; https://emacs.stackexchange.com/a/58825
(define-advice isearch-repeat (:before (direction &optional count) goto-other-end)
  "If reversing, start the search from the other end of the current match."
  (unless (eq isearch-forward (eq direction 'forward))
    (when isearch-other-end
      (goto-char isearch-other-end))))
#+end_src

** minibuffer & completion
#+begin_src elisp
(use-package vertico
  :straight '(:files (:defaults "extensions/*")
               :includes (vertico-directory))
  :init
  (vertico-mode)
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)
  )


(use-package savehist
  :init
  (savehist-mode))

(use-package orderless
  :custom
  (orderless-matching-styles '(orderless-prefixes))

  ;; https://github.com/minad/vertico#configuration
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides nil)
  ;; (completion-category-overrides '((file (styles partial-completion substring))))
  )

;; https ://www.reddit.com/r/emacs/comments/krptmz/emacs_completion_framework_embark_consult/
(use-package consult
  :custom
  (consult-project-function #'projectile-project-root)
  (consult-preview-key nil))

(use-package marginalia
  :init
  (marginalia-mode)
  :config
  (setq marginalia-command-categories
        (a-merge marginalia-command-categories '((projectile-find-file . file)
                                                 (projectile-find-dir . file))))
  (advice-add #'marginalia-cycle :after
              (lambda () (when (bound-and-true-p
                                selectrum-mode) (selectrum-exhibit)))))

(use-package embark
  :config
  (add-to-list 'embark-pre-action-hooks '(flyspell-correct-at-point embark--ignore-target)))

(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** crux
https://github.com/bbatsov/crux
#+begin_src elisp
(use-package crux)
#+end_src

*** rainbow-mode
#+begin_src elisp
(use-package rainbow-mode
    :hook (css-mode org-mode help-mode)
    :delight rainbow-mode)
#+end_src

*** kurecolor
#+begin_src elisp
(use-package kurecolor :defer t)
#+end_src

*** Evil-Nerd-Commenter
#+begin_src elisp
(use-package evil-nerd-commenter
    :config
    (evilnc-default-hotkeys))
#+end_src

*** Outshine
#+begin_src elisp
(use-package outshine
    :commands outshine-mode)

(use-package navi-mode
    :commands navi-mode)
#+end_src

*** Company-Mode
#+begin_src elisp
(use-package corfu
    :init (global-corfu-mode)
    :custom
    (corfu-auto t)
    (corfu-auto-prefix 2)
    :bind (:map corfu-map
                ("C-ä" . corfu-next)
                ("C-ü" . corfu-previous))
    :delight corfu-mode
    )

(use-package cape
  :init
  ;; TODO: maybe use cape-dict with long delay
  ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
  (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-org-block))
  )

#+end_src

*** Smartparens
#+begin_src elisp
(use-package smartparens
    :bind (:map smartparens-mode-map
                ("C-M-a" . sp-backward-sexp)
                ("C-M-e" . sp-forward-sexp)
                ("C-S-<backspace>" . sp-backward-kill-sexp)
                ("C-M-<down>" . sp-select-next-thing))
    :init
    (smartparens-global-mode 1)
    :hook (prog-mode . show-smartparens-mode)
    :config
    (require 'smartparens-config)
    :custom
    (blink-matching-paren nil)
    (sp-show-pair-delay 0.2)
    (sp-message-width nil)
    :delight smartparens-mode)
#+end_src

*** vundo & undo-fu
#+begin_src elisp
(use-package vundo)

(use-package undo-fu)
#+end_src

*** Ediff
TODO more at [[http://oremacs.com/2015/01/17/setting-up-ediff/][oremacs.com]]
**** Config
#+begin_src elisp
(setq ediff-keep-variants nil)
(setq ediff-window-setup-function 'ediff-setup-windows-plain
      ediff-split-window-function 'split-window-horizontally)
(add-hook 'ediff-prepare-buffer-hook 'show-all)
#+end_src

*** Ripgrep
#+begin_src elisp
(use-package wgrep :defer t)
#+end_src

*** Projectile
#+begin_src elisp
(use-package projectile
    :init (projectile-mode 1)
    :config
      (defun my--projectile-ignore-project (project-root)
        (f-descendant-of? project-root (f-expand "straight" user-emacs-directory)))
      (defun my--projectile-mode-line-function ()
        (format " %s" (projectile-project-name)))
    :custom
    (projectile-mode-line-function 'my--projectile-mode-line-function)
    (projectile-file-exists-remote-cache-expire nil)
    (projectile-completion-system 'default)
    (projectile-switch-project-action 'projectile-vc)
    (projectile-enable-caching t)
    (projectile-ignored-project-function #'my--projectile-ignore-project)
    :delight projectile-mode)
#+end_src

*** which-key
#+begin_src elisp
(use-package which-key
    :init (which-key-mode)
    :custom
    (which-key-show-early-on-C-h t)
    (which-key-idle-delay 3.0)
    (which-key-idle-secondary-delay 0.05)
    (help-char 94) ;; caret (ASCII)
    :delight which-key-mode)
#+end_src

*** helpful
#+begin_src elisp
(use-package
  helpful
  :bind* (("C-h f" . helpful-callable)
          ("C-h v" . helpful-variable)
          ("C-h k" . helpful-key)
          ("C-h C-d" . helpful-at-point)
          ("C-h F" . helpful-function)
          ("C-h C" . helpful-command)))
#+end_src

*** dumb-jump
#+begin_src elisp
(use-package
  dumb-jump
  :init (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  :custom (dumb-jump-prefer-searcher 'rg))
#+end_src

*** ix.io
#+begin_src elisp
(use-package
  ix
  :commands ix)
#+end_src

** hydra
#+begin_src elisp
(use-package hydra)
#+end_src

** magit
#+begin_src elisp
(use-package magit
    :commands magit-status
    :custom
    (magit-auto-revert-mode nil)
    (magit-diff-section-arguments (quote ("--no-ext-diff" "-U2")))
    (magit-diff-refine-ignore-whitespace nil)
    (magit-refs-margin '(t "%Y-%m-%d %H:%M" magit-log-margin-width nil 18))
    (magit-log-margin '(t "%Y-%m-%d %H:%M" magit-log-margin-width t 18))
    (magit-diff-refine-hunk t)
    (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)

    :config
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules-unpulled-from-upstream
                            'magit-insert-unpulled-from-upstream)
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules-unpushed-to-upstream
                            'magit-insert-unpulled-from-upstream)

    (defun my--git-commit-check-commitlint (force)
      (or force
          (let ((old-buffer (current-buffer)))
            (save-window-excursion
              (with-temp-buffer
                (insert-buffer-substring old-buffer)
                (flush-lines "^#.*" (point-min) (point-max))
                (let* ((commitlint-cmd "go-commitlinter")
                       (exit-code (shell-command-on-region (point-min) (point-max) commitlint-cmd)))
                  (if (equal exit-code 0)
                      t
                    (pop-to-buffer-same-window "*Shell Command Output*" ())
                    (ansi-color-apply-on-region (point-min) (point-max))
                    (y-or-n-p "Commitlint error. Commit anyway?")
                    )
                  ))))))
    (cl-pushnew 'my--git-commit-check-commitlint git-commit-finish-query-functions))
#+end_src

** dired & dirvish
#+begin_src elisp
;; mostly based on https://github.com/alexluigit/dirvish/blob/main/Configuration.org#Example-config

(use-package dired
  :straight nil
  :custom
  (dired-recursive-deletes 'top)
  (dired-recursive-copies 'always)
  (delete-by-moving-to-trash t)
  (dired-dwim-target nil)
  (dired-auto-revert-buffer t)
  (dired-clean-confirm-killing-deleted-buffers nil)
  ;; todo: not respected?
  (dired-kill-when-opening-new-dired-buffer t)
  (dired-listing-switches "-aDGhvl --group-directories-first --time-style=long-iso"))

(use-package dirvish
  :demand t
  :init
  (dirvish-override-dired-mode))

(use-package dired-x
  :straight nil
  ;; Enable dired-omit-mode by default
  ;; :hook
  ;; (dired-mode . dired-omit-mode)
  :config
  ;; Make dired-omit-mode hide all "dotfiles"
  ;; (setq dired-omit-files
  ;;       (concat dired-omit-files "\\|^\\..*$"))
  )

(use-package diredfl
  :hook
  (dired-mode . diredfl-mode))
#+end_src

* languages
** adoc
#+begin_src elisp
(use-package adoc-mode
    :mode "\\.adoc\\'")
#+end_src

** c++
#+begin_src elisp
(use-package c++-mode
  :straight nil
  :mode "\\.h\\'")

(use-package irony-mode
  :init (defun my--on-c++-mode ()
          (irony-mode)
          (flycheck-mode))
  :hook (c++-mode . my--on-c++-mode))

(use-package flycheck-irony
  :hook (flycheck-mode . flycheck-irony-setup))
#+end_src

** docker
#+begin_src elisp
(use-package dockerfile-mode
    :mode ("\\Dockerfile\\'" "\\Dockerfile\\'"))
#+end_src

** elisp
#+begin_src elisp
(use-package emacs-lisp
  :hook (emacs-lisp-mode . nameless-mode)
  :straight nil)

(use-package nameless
  :commands nameless-mode
  :custom (nameless-private-prefix t))

(use-package xtest :defer t)
#+end_src

** elixir
#+begin_src elisp
(use-package elixir-mode
    :hook (elixir-mode . flycheck-mode)
    :mode "\\.ex\\'")

(use-package flycheck-credo
    :after elixir-mode
    :config
    (flycheck-credo-setup)
    :custom
    (flycheck-elixir-credo-strict nil))
#+end_src

** golang
#+begin_src elisp
(use-package go-mode
    :mode "\\.go\\'"
    :config
    (require 'dap-go)
    :hook (go-mode . lsp-deferred))
#+end_src

** graphql
#+begin_src elisp
(use-package graphql-mode
    :mode ("\\.gql\\'" "\\.graphql\\'"))
#+end_src

** java
#+begin_src elisp
(use-package lsp-java)

(use-package java-mode
  :straight nil
  ;; :hook (java-mode . lsp)
  :mode "\\.java\\'")
#+end_src

** json
#+begin_src elisp
(use-package json-mode
    :mode "\\.json\\'"
    :custom
    (json-reformat:indent-width 2)
    (js-indent-level 2))
#+end_src

** jsonnet
#+begin_src elisp
(use-package jsonnet-mode
    :mode  ("\\.jsonnet\\'" "\\.libsonnet\\'"))
#+end_src

** just
#+begin_src elisp
(use-package just-mode
    :mode  ("justfile\\'"))
#+end_src

** kotlin
#+begin_src elisp
(use-package kotlin-mode
  :mode "\\.kt\\'")
#+end_src

** latex
#+begin_src elisp
(use-package tex-mode
    :straight auctex
    :mode "\\.tex\\'"
    :hook (LaTeX-mode . turn-on-reftex))
#+end_src

** lua
#+begin_src elisp
(use-package lua-mode
    :mode ("\\.lua\\'"))
#+end_src

** markdown
#+begin_src elisp
(use-package markdown-mode
    :mode "\\.md\\'")

(use-package grip-mode
  :custom
  (grip-preview-use-webkit nil))
#+end_src

** nim
#+begin_src elisp
(use-package nim-mode
    :mode "\\.nim\\'"
    :hook ((nim-mode . nimsuggest-mode)))
#+end_src

** nix
#+begin_src elisp
(use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

** php
#+begin_src elisp
(use-package php-mode
    :mode "\\.php\\'")
#+end_src

** plantuml
#+begin_src elisp
(use-package
    plantuml-mode
    :mode "\\.puml\\'"
    :custom
    (plantuml-executable-path "/usr/bin/plantuml")
    (plantuml-default-exec-mode 'executable))
#+end_src

** python
#+begin_src elisp
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :hook (python-mode . lsp-deferred))

(use-package lsp-pyright
  :after python)
#+end_src

** rust
#+begin_src elisp
;; No conditional-on-mode necessary
(use-package rustic
  :custom
  (lsp-rust-analyzer-proc-macro-enable t))
#+end_src

** sql
#+begin_src elisp
(use-package sql-indent
  :hook (sql-mode . sqlind-minor-mode)
  :delight sqlind-minor-mode)
#+end_src

** terraform
#+begin_src elisp
(use-package terraform-mode
    :mode "\\.tf\\'")
    ;; :hook (terraform-mode . lsp-deferred))
#+end_src

** shell
#+begin_src elisp
(use-package sh-mode
  :straight nil
  :hook (sh-mode . flycheck-mode))
#+end_src

** tramp
#+begin_src elisp
(setq tramp-default-method "ssh")
#+end_src

** webdev
#+begin_src elisp
(use-package css-mode
    :mode ("\\.less\\'" "\\.css\\'" "\\.sass\\'" "\\.scss\\'")
    :custom
    (css-indent-offset 4))

(use-package js2-mode
    :mode "\\.js\\'"
    :hook (js2-mode . lsp-deferred)
    :custom
    (js2-basic-offset 2)
    (js2-strict-inconsistent-return-warning nil)
    (js2-strict-missing-semi-warning nil)
    :delight)

(use-package web-mode
    :mode ("\\.html?\\'" "\\.jsx\\'" "\\.tsx\\'")
    :custom
    (web-mode-enable-auto-closing t)
    (web-mode-enable-auto-indentation nil))

(use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . (lambda ()
                                (lsp-deferred)
                                (my/lsp-format-buf)))
    :config (setq lsp-eslint-server-command
                  '("node"
                    (expand-file-name"~/.local/vscode-eslint/extension/server/out/eslintServer.js")
                    "--stdio")))
#+end_src

** yaml
#+begin_src elisp
(use-package yaml-mode
    :mode ("\\.yml.*\\'" "\\.yaml.*\\'"))
#+end_src

* tools
#+begin_src elisp
(use-package x509-mode :defer t)

(use-package restclient
    :mode ("\\.http\\'" . restclient-mode)
    :commands restclient-mode)

(use-package ledger-mode
    :mode "\\.ledger\\'")

(use-package google-translate)
(use-package google-translate-smooth-ui
  :after google-translate
  :straight nil
  :commands google-translate-smooth-translate
  :config
  ;; https://github.com/atykhonov/google-translate/issues/52#issuecomment-727920888
  (setq google-translate-translation-directions-alist '(("de" . "en")("en" . "de")))
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
  (google-translate--setup-minibuffer-keymap)
  (general-def
  :keymaps 'google-translate-minibuffer-keymap
  "M-ä" 'google-translate-next-translation-direction
  "M-ü" 'google-translate-previous-translation-direction))

(use-package mail-mode
    :straight nil
    :mode "\\/tmp\\/neomutt.*\\'")
(use-package khardel
  :general
  (:keymaps 'mail-mode-map
            "C-f" 'khardel-insert-email))

(use-package gif-screencast
  :commands gif-screencast-start-or-stop
  :custom
  (gif-screencast-program "grim")
  (gif-screencast-args ()))

(use-package insert-shebang
  :init
  ;; revert ;;;###autoload(add-hook 'find-file-hook 'insert-shebang)
  (remove-hook 'find-file-hook 'insert-shebang)
  :commands insert-shebang
  :custom
  (insert-shebang-track-ignored-filename nil))

(use-package easy-convert
  :straight (:host github :repo "Frozenlock/easy-convert")
  :commands easy-convert-interactive)

(use-package org-download
  :after org)

(use-package string-inflection
  :commands (string-inflection-all-cycle))

(use-package recover-buffers)

(use-package ebuku
  :commands ebuku)

(use-package units-mode
  :commands units-mode)

(use-package spookfox
  :straight
  (spookfox :type git
            :host github
            :repo "bitspook/spookfox"
            :files ("lisp/*.el" "lisp/apps/*.el"))
  :config
  (require 'spookfox-org-tabs)
  (setq spookfox-enabled-apps '(spookfox-org-tabs))
  ;; (spookfox-init)
  )

#+end_src

* ui
#+begin_src elisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(mouse-avoidance-mode)
(setq blink-cursor-blinks 3)
(scroll-bar-mode -1)
(column-number-mode 1)
(set-face-attribute 'default nil :family "Monospace" :height 110)
(setq-default cursor-type 'bar)

(use-package olivetti
  :hook
  ;; alternatively try as global mode: https://github.com/rnkn/olivetti/pull/56
  (text-mode . olivetti-mode)
  (prog-mode . olivetti-mode)
  (dired-mode . olivetti-mode)
  (magit-mode . olivetti-mode)
  ;; (fundamental-mode . olivetti-mode)
  :custom
  (olivetti-mode-on-hook '())
  (olivetti-body-width 125)
  :delight olivetti-mode)


;; https://stackoverflow.com/questions/27845980/how-do-i-remove-newline-symbols-inside-emacs-vertical-border
(setf (cdr (assq 'continuation fringe-indicator-alist))
      '(nil right-curly-arrow) ;; right indicator only
      )

(use-package modus-themes
  :custom
  (modus-themes-fringes nil)
  (modus-themes-region '('bg-only 'no-extend))
  (modus-themes-org-blocks 'greyscale)
    :init
    (modus-themes-load-themes)
    (defun my-modus-themes-custom-faces ()
      (modus-themes-with-colors
        (custom-set-faces
         `(show-paren-match ((,class :foreground ,green-subtle-bg
                                            :background nil
                                            :weight ,'bold))))))
    (add-hook 'modus-themes-after-load-theme-hook #'my-modus-themes-custom-faces)
    :config
    (modus-themes-load-operandi))

#+end_src

* finish
#+begin_src elisp
(use-package gcmh
  :init
  ;; https://github.com/hlissner/doom-emacs/blob/develop/core/core.el#L295
  (setq gcmh-idle-delay 'auto  ; default is 15s
        gcmh-auto-idle-delay-factor 10
        ;; 16mb
        gcmh-high-cons-threshold (* 16 1024 1024))
  (gcmh-mode 1)
  :delight)
#+end_src

* Calc
https://www.reddit.com/r/emacs/comments/1mbn0s/the_emacs_calculator/
* braindump
** other
*** [[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html#sec-10-2-3][@wisomandwonder]]
*** [[https://github.com/emacs-tw/awesome-emacs][awesome-emac2s]]
** elisp tips
- [[https://www.reddit.com/r/emacs/comments/3nu2xr/emacs_lisp_programming_thoughts/][@reddit.com]]
*** regexp
\(Buy: \)\([0-9]+\) -> \1\,(+ \#2 \#)

*** C-c C-o save search results
*** reset var: `(setq foo (eval (car (get 'foo 'standard-value))))`
(setq require-final-newline nil)
** plausiblly
https://github.com/abo-abo/hydra/wiki/Emacs
